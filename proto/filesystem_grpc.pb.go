// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.20.3
// source: proto/filesystem.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	FilesystemService_ListDirectory_FullMethodName    = "/filesystem.FilesystemService/ListDirectory"
	FilesystemService_GetHierarchy_FullMethodName     = "/filesystem.FilesystemService/GetHierarchy"
	FilesystemService_GetFileInfo_FullMethodName      = "/filesystem.FilesystemService/GetFileInfo"
	FilesystemService_CreateDirectory_FullMethodName  = "/filesystem.FilesystemService/CreateDirectory"
	FilesystemService_Delete_FullMethodName           = "/filesystem.FilesystemService/Delete"
	FilesystemService_Copy_FullMethodName             = "/filesystem.FilesystemService/Copy"
	FilesystemService_Move_FullMethodName             = "/filesystem.FilesystemService/Move"
	FilesystemService_UploadFile_FullMethodName       = "/filesystem.FilesystemService/UploadFile"
	FilesystemService_DownloadFile_FullMethodName     = "/filesystem.FilesystemService/DownloadFile"
	FilesystemService_Exists_FullMethodName           = "/filesystem.FilesystemService/Exists"
	FilesystemService_GetDirectorySize_FullMethodName = "/filesystem.FilesystemService/GetDirectorySize"
	FilesystemService_Search_FullMethodName           = "/filesystem.FilesystemService/Search"
)

// FilesystemServiceClient is the client API for FilesystemService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// FilesystemService provides methods for file operations
type FilesystemServiceClient interface {
	// List directory contents
	ListDirectory(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListResponse, error)
	// Get directory hierarchy (with nested structure)
	GetHierarchy(ctx context.Context, in *HierarchyRequest, opts ...grpc.CallOption) (*HierarchyResponse, error)
	// Get file information
	GetFileInfo(ctx context.Context, in *FileRequest, opts ...grpc.CallOption) (*FileInfo, error)
	// Create directory
	CreateDirectory(ctx context.Context, in *CreateDirectoryRequest, opts ...grpc.CallOption) (*OperationResponse, error)
	// Delete file or directory
	Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*OperationResponse, error)
	// Copy file or directory
	Copy(ctx context.Context, in *CopyRequest, opts ...grpc.CallOption) (*OperationResponse, error)
	// Move/rename file or directory
	Move(ctx context.Context, in *MoveRequest, opts ...grpc.CallOption) (*OperationResponse, error)
	// Upload file (streaming from client)
	UploadFile(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[FileChunk, OperationResponse], error)
	// Download file (streaming to client)
	DownloadFile(ctx context.Context, in *FileRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[FileChunk], error)
	// Check if path exists
	Exists(ctx context.Context, in *PathRequest, opts ...grpc.CallOption) (*ExistsResponse, error)
	// Get directory size
	GetDirectorySize(ctx context.Context, in *PathRequest, opts ...grpc.CallOption) (*SizeResponse, error)
	// Search for files/directories
	Search(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*ListResponse, error)
}

type filesystemServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFilesystemServiceClient(cc grpc.ClientConnInterface) FilesystemServiceClient {
	return &filesystemServiceClient{cc}
}

func (c *filesystemServiceClient) ListDirectory(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListResponse)
	err := c.cc.Invoke(ctx, FilesystemService_ListDirectory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *filesystemServiceClient) GetHierarchy(ctx context.Context, in *HierarchyRequest, opts ...grpc.CallOption) (*HierarchyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HierarchyResponse)
	err := c.cc.Invoke(ctx, FilesystemService_GetHierarchy_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *filesystemServiceClient) GetFileInfo(ctx context.Context, in *FileRequest, opts ...grpc.CallOption) (*FileInfo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FileInfo)
	err := c.cc.Invoke(ctx, FilesystemService_GetFileInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *filesystemServiceClient) CreateDirectory(ctx context.Context, in *CreateDirectoryRequest, opts ...grpc.CallOption) (*OperationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(OperationResponse)
	err := c.cc.Invoke(ctx, FilesystemService_CreateDirectory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *filesystemServiceClient) Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*OperationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(OperationResponse)
	err := c.cc.Invoke(ctx, FilesystemService_Delete_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *filesystemServiceClient) Copy(ctx context.Context, in *CopyRequest, opts ...grpc.CallOption) (*OperationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(OperationResponse)
	err := c.cc.Invoke(ctx, FilesystemService_Copy_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *filesystemServiceClient) Move(ctx context.Context, in *MoveRequest, opts ...grpc.CallOption) (*OperationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(OperationResponse)
	err := c.cc.Invoke(ctx, FilesystemService_Move_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *filesystemServiceClient) UploadFile(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[FileChunk, OperationResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &FilesystemService_ServiceDesc.Streams[0], FilesystemService_UploadFile_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[FileChunk, OperationResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type FilesystemService_UploadFileClient = grpc.ClientStreamingClient[FileChunk, OperationResponse]

func (c *filesystemServiceClient) DownloadFile(ctx context.Context, in *FileRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[FileChunk], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &FilesystemService_ServiceDesc.Streams[1], FilesystemService_DownloadFile_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[FileRequest, FileChunk]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type FilesystemService_DownloadFileClient = grpc.ServerStreamingClient[FileChunk]

func (c *filesystemServiceClient) Exists(ctx context.Context, in *PathRequest, opts ...grpc.CallOption) (*ExistsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ExistsResponse)
	err := c.cc.Invoke(ctx, FilesystemService_Exists_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *filesystemServiceClient) GetDirectorySize(ctx context.Context, in *PathRequest, opts ...grpc.CallOption) (*SizeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SizeResponse)
	err := c.cc.Invoke(ctx, FilesystemService_GetDirectorySize_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *filesystemServiceClient) Search(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*ListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListResponse)
	err := c.cc.Invoke(ctx, FilesystemService_Search_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FilesystemServiceServer is the server API for FilesystemService service.
// All implementations must embed UnimplementedFilesystemServiceServer
// for forward compatibility.
//
// FilesystemService provides methods for file operations
type FilesystemServiceServer interface {
	// List directory contents
	ListDirectory(context.Context, *ListRequest) (*ListResponse, error)
	// Get directory hierarchy (with nested structure)
	GetHierarchy(context.Context, *HierarchyRequest) (*HierarchyResponse, error)
	// Get file information
	GetFileInfo(context.Context, *FileRequest) (*FileInfo, error)
	// Create directory
	CreateDirectory(context.Context, *CreateDirectoryRequest) (*OperationResponse, error)
	// Delete file or directory
	Delete(context.Context, *DeleteRequest) (*OperationResponse, error)
	// Copy file or directory
	Copy(context.Context, *CopyRequest) (*OperationResponse, error)
	// Move/rename file or directory
	Move(context.Context, *MoveRequest) (*OperationResponse, error)
	// Upload file (streaming from client)
	UploadFile(grpc.ClientStreamingServer[FileChunk, OperationResponse]) error
	// Download file (streaming to client)
	DownloadFile(*FileRequest, grpc.ServerStreamingServer[FileChunk]) error
	// Check if path exists
	Exists(context.Context, *PathRequest) (*ExistsResponse, error)
	// Get directory size
	GetDirectorySize(context.Context, *PathRequest) (*SizeResponse, error)
	// Search for files/directories
	Search(context.Context, *SearchRequest) (*ListResponse, error)
	mustEmbedUnimplementedFilesystemServiceServer()
}

// UnimplementedFilesystemServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedFilesystemServiceServer struct{}

func (UnimplementedFilesystemServiceServer) ListDirectory(context.Context, *ListRequest) (*ListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDirectory not implemented")
}
func (UnimplementedFilesystemServiceServer) GetHierarchy(context.Context, *HierarchyRequest) (*HierarchyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHierarchy not implemented")
}
func (UnimplementedFilesystemServiceServer) GetFileInfo(context.Context, *FileRequest) (*FileInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFileInfo not implemented")
}
func (UnimplementedFilesystemServiceServer) CreateDirectory(context.Context, *CreateDirectoryRequest) (*OperationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDirectory not implemented")
}
func (UnimplementedFilesystemServiceServer) Delete(context.Context, *DeleteRequest) (*OperationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedFilesystemServiceServer) Copy(context.Context, *CopyRequest) (*OperationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Copy not implemented")
}
func (UnimplementedFilesystemServiceServer) Move(context.Context, *MoveRequest) (*OperationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Move not implemented")
}
func (UnimplementedFilesystemServiceServer) UploadFile(grpc.ClientStreamingServer[FileChunk, OperationResponse]) error {
	return status.Errorf(codes.Unimplemented, "method UploadFile not implemented")
}
func (UnimplementedFilesystemServiceServer) DownloadFile(*FileRequest, grpc.ServerStreamingServer[FileChunk]) error {
	return status.Errorf(codes.Unimplemented, "method DownloadFile not implemented")
}
func (UnimplementedFilesystemServiceServer) Exists(context.Context, *PathRequest) (*ExistsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Exists not implemented")
}
func (UnimplementedFilesystemServiceServer) GetDirectorySize(context.Context, *PathRequest) (*SizeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDirectorySize not implemented")
}
func (UnimplementedFilesystemServiceServer) Search(context.Context, *SearchRequest) (*ListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Search not implemented")
}
func (UnimplementedFilesystemServiceServer) mustEmbedUnimplementedFilesystemServiceServer() {}
func (UnimplementedFilesystemServiceServer) testEmbeddedByValue()                           {}

// UnsafeFilesystemServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FilesystemServiceServer will
// result in compilation errors.
type UnsafeFilesystemServiceServer interface {
	mustEmbedUnimplementedFilesystemServiceServer()
}

func RegisterFilesystemServiceServer(s grpc.ServiceRegistrar, srv FilesystemServiceServer) {
	// If the following call pancis, it indicates UnimplementedFilesystemServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&FilesystemService_ServiceDesc, srv)
}

func _FilesystemService_ListDirectory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FilesystemServiceServer).ListDirectory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FilesystemService_ListDirectory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FilesystemServiceServer).ListDirectory(ctx, req.(*ListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FilesystemService_GetHierarchy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HierarchyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FilesystemServiceServer).GetHierarchy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FilesystemService_GetHierarchy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FilesystemServiceServer).GetHierarchy(ctx, req.(*HierarchyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FilesystemService_GetFileInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FilesystemServiceServer).GetFileInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FilesystemService_GetFileInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FilesystemServiceServer).GetFileInfo(ctx, req.(*FileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FilesystemService_CreateDirectory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDirectoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FilesystemServiceServer).CreateDirectory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FilesystemService_CreateDirectory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FilesystemServiceServer).CreateDirectory(ctx, req.(*CreateDirectoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FilesystemService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FilesystemServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FilesystemService_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FilesystemServiceServer).Delete(ctx, req.(*DeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FilesystemService_Copy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CopyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FilesystemServiceServer).Copy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FilesystemService_Copy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FilesystemServiceServer).Copy(ctx, req.(*CopyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FilesystemService_Move_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MoveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FilesystemServiceServer).Move(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FilesystemService_Move_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FilesystemServiceServer).Move(ctx, req.(*MoveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FilesystemService_UploadFile_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(FilesystemServiceServer).UploadFile(&grpc.GenericServerStream[FileChunk, OperationResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type FilesystemService_UploadFileServer = grpc.ClientStreamingServer[FileChunk, OperationResponse]

func _FilesystemService_DownloadFile_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(FileRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(FilesystemServiceServer).DownloadFile(m, &grpc.GenericServerStream[FileRequest, FileChunk]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type FilesystemService_DownloadFileServer = grpc.ServerStreamingServer[FileChunk]

func _FilesystemService_Exists_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PathRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FilesystemServiceServer).Exists(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FilesystemService_Exists_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FilesystemServiceServer).Exists(ctx, req.(*PathRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FilesystemService_GetDirectorySize_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PathRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FilesystemServiceServer).GetDirectorySize(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FilesystemService_GetDirectorySize_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FilesystemServiceServer).GetDirectorySize(ctx, req.(*PathRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FilesystemService_Search_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FilesystemServiceServer).Search(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FilesystemService_Search_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FilesystemServiceServer).Search(ctx, req.(*SearchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FilesystemService_ServiceDesc is the grpc.ServiceDesc for FilesystemService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FilesystemService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "filesystem.FilesystemService",
	HandlerType: (*FilesystemServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListDirectory",
			Handler:    _FilesystemService_ListDirectory_Handler,
		},
		{
			MethodName: "GetHierarchy",
			Handler:    _FilesystemService_GetHierarchy_Handler,
		},
		{
			MethodName: "GetFileInfo",
			Handler:    _FilesystemService_GetFileInfo_Handler,
		},
		{
			MethodName: "CreateDirectory",
			Handler:    _FilesystemService_CreateDirectory_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _FilesystemService_Delete_Handler,
		},
		{
			MethodName: "Copy",
			Handler:    _FilesystemService_Copy_Handler,
		},
		{
			MethodName: "Move",
			Handler:    _FilesystemService_Move_Handler,
		},
		{
			MethodName: "Exists",
			Handler:    _FilesystemService_Exists_Handler,
		},
		{
			MethodName: "GetDirectorySize",
			Handler:    _FilesystemService_GetDirectorySize_Handler,
		},
		{
			MethodName: "Search",
			Handler:    _FilesystemService_Search_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "UploadFile",
			Handler:       _FilesystemService_UploadFile_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "DownloadFile",
			Handler:       _FilesystemService_DownloadFile_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/filesystem.proto",
}

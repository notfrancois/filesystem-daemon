syntax = "proto3";

package filesystem;

option go_package = "github.com/filesystem-daemon/proto";

// FilesystemService provides methods for file operations
service FilesystemService {
  // List directory contents
  rpc ListDirectory(ListRequest) returns (ListResponse) {}
  
  // Get directory hierarchy (with nested structure)
  rpc GetHierarchy(HierarchyRequest) returns (HierarchyResponse) {}
  
  // Get file information
  rpc GetFileInfo(FileRequest) returns (FileInfo) {}
  
  // Create directory
  rpc CreateDirectory(CreateDirectoryRequest) returns (OperationResponse) {}
  
  // Delete file or directory
  rpc Delete(DeleteRequest) returns (OperationResponse) {}
  
  // Copy file or directory
  rpc Copy(CopyRequest) returns (OperationResponse) {}
  
  // Move/rename file or directory
  rpc Move(MoveRequest) returns (OperationResponse) {}
  
  // Upload file (streaming from client)
  rpc UploadFile(stream FileChunk) returns (OperationResponse) {}
  
  // Download file (streaming to client)
  rpc DownloadFile(FileRequest) returns (stream FileChunk) {}
  
  // Check if path exists
  rpc Exists(PathRequest) returns (ExistsResponse) {}
  
  // Get directory size
  rpc GetDirectorySize(PathRequest) returns (SizeResponse) {}
  
  // Search for files/directories
  rpc Search(SearchRequest) returns (ListResponse) {}
  
  // File content operations for editing
  rpc OpenFile(OpenFileRequest) returns (OpenFileResponse) {}
  rpc CloseFile(CloseFileRequest) returns (OperationResponse) {}
  rpc ReadFileContent(FileRequest) returns (FileContentResponse) {}
  rpc WriteFileContent(WriteFileContentRequest) returns (OperationResponse) {}
  rpc GetFileLines(GetFileLinesRequest) returns (FileLinesResponse) {}
  rpc UpdateFileLines(UpdateFileLinesRequest) returns (OperationResponse) {}
  rpc LockFile(LockFileRequest) returns (LockFileResponse) {}
  rpc UnlockFile(UnlockFileRequest) returns (OperationResponse) {}
}

// ListRequest specifies a directory to list
message ListRequest {
  string path = 1;
  bool recursive = 2;
  string pattern = 3; // Optional glob pattern
}

// FileItem represents a file or directory
message FileItem {
  string name = 1;
  string path = 2;
  bool is_directory = 3;
  int64 size = 4;
  int64 modified_time = 5;
  string permissions = 6;
  // Fields added to support hierarchy
  repeated FileItem children = 7;   // Child items if this is a directory
  string parent_path = 8;          // Path to parent directory
}

// ListResponse contains directory contents
message ListResponse {
  repeated FileItem items = 1;
}

// FileRequest specifies a file path
message FileRequest {
  string path = 1;
}

// FileInfo contains detailed information about a file
message FileInfo {
  string name = 1;
  string path = 2;
  bool is_directory = 3;
  int64 size = 4;
  int64 modified_time = 5;
  int64 creation_time = 6;
  int64 access_time = 7;
  string mime_type = 8;
  string permissions = 9;
  string owner = 10;
  string group = 11;
}

// CreateDirectoryRequest specifies path for new directory
message CreateDirectoryRequest {
  string path = 1;
  int32 permissions = 2; // Optional octal permissions
}

// DeleteRequest specifies path to delete
message DeleteRequest {
  string path = 1;
  bool recursive = 2; // For directories
}

// CopyRequest specifies source and destination
message CopyRequest {
  string source = 1;
  string destination = 2;
  bool overwrite = 3;
}

// MoveRequest specifies source and destination
message MoveRequest {
  string source = 1;
  string destination = 2;
  bool overwrite = 3;
}

// PathRequest specifies a path for operations
message PathRequest {
  string path = 1;
}

// ExistsResponse indicates if a path exists
message ExistsResponse {
  bool exists = 1;
  bool is_directory = 2;
}

// SizeResponse returns size in bytes
message SizeResponse {
  int64 size = 1;
}

// FileChunk is used for file transfers
message FileChunk {
  string file_path = 1;
  bytes content = 2;
  int64 offset = 3;
  bool is_last = 4;
}

// OperationResponse returns result of an operation
message OperationResponse {
  bool success = 1;
  string message = 2;
  string error = 3;
}

// SearchRequest defines search parameters
message SearchRequest {
  string base_path = 1;
  string pattern = 2;
  bool case_sensitive = 3;
  bool recursive = 4;
  bool directories_only = 5;
  bool files_only = 6;
  int32 max_results = 7;
}

// HierarchyRequest specifies a directory to get hierarchy for
message HierarchyRequest {
  string path = 1;
  int32 max_depth = 2;    // Maximum depth to traverse (0 for unlimited)
  string pattern = 3;     // Optional glob pattern
}

// HierarchyResponse contains directory hierarchy
message HierarchyResponse {
  FileItem root = 1;       // Root directory with nested children
  bool truncated = 2;      // Indicates if hierarchy was truncated due to max_depth
}

// OpenFileRequest for opening a file for editing
message OpenFileRequest {
  string path = 1;
  FileOpenMode mode = 2;        // Read, Write, ReadWrite
  bool create_if_not_exists = 3;
  bool exclusive_lock = 4;      // Request exclusive lock
}

// OpenFileResponse returns file handle and metadata
message OpenFileResponse {
  bool success = 1;
  string file_handle = 2;       // Unique handle for this open session
  FileInfo file_info = 3;       // File metadata
  string lock_id = 4;           // Lock identifier if locked
  string error = 5;
}

// CloseFileRequest for closing an open file
message CloseFileRequest {
  string file_handle = 1;
  bool save_changes = 2;        // Whether to save pending changes
}

// FileContentResponse returns file content as text
message FileContentResponse {
  bool success = 1;
  string content = 2;           // File content as string
  string encoding = 3;          // File encoding (utf-8, ascii, etc.)
  int32 line_count = 4;         // Total number of lines
  int64 size = 5;               // File size in bytes
  string error = 6;
}

// WriteFileContentRequest for writing entire file content
message WriteFileContentRequest {
  string path = 1;
  string file_handle = 2;       // Optional: if file is open
  string content = 3;           // New file content
  string encoding = 4;          // Content encoding
  bool create_backup = 5;       // Create backup before writing
  bool truncate = 6;            // Truncate file before writing
}

// GetFileLinesRequest for reading specific lines
message GetFileLinesRequest {
  string path = 1;
  string file_handle = 2;       // Optional: if file is open
  int32 start_line = 3;         // Starting line number (1-based)
  int32 end_line = 4;           // Ending line number (0 for end of file)
  bool include_line_numbers = 5;
}

// FileLinesResponse returns specific lines from file
message FileLinesResponse {
  bool success = 1;
  repeated FileLine lines = 2;
  int32 total_lines = 3;
  string error = 4;
}

// FileLine represents a single line with metadata
message FileLine {
  int32 line_number = 1;
  string content = 2;
  int32 length = 3;             // Line length in characters
}

// UpdateFileLinesRequest for updating specific lines
message UpdateFileLinesRequest {
  string path = 1;
  string file_handle = 2;       // Optional: if file is open
  repeated LineUpdate updates = 3;
  bool create_backup = 4;
}

// LineUpdate represents a line modification
message LineUpdate {
  int32 line_number = 1;        // Line to update (1-based)
  string new_content = 2;       // New line content
  LineOperation operation = 3;   // Insert, Replace, Delete
}

// LockFileRequest for file locking
message LockFileRequest {
  string path = 1;
  LockType lock_type = 2;       // Shared or Exclusive
  int32 timeout_seconds = 3;    // Lock timeout
}

// LockFileResponse returns lock information
message LockFileResponse {
  bool success = 1;
  string lock_id = 2;           // Unique lock identifier
  int64 expires_at = 3;         // Lock expiration timestamp
  string error = 4;
}

// UnlockFileRequest for releasing file locks
message UnlockFileRequest {
  string path = 1;
  string lock_id = 2;           // Lock identifier to release
}

// Enums for file operations
enum FileOpenMode {
  READ_ONLY = 0;
  WRITE_ONLY = 1;
  READ_WRITE = 2;
}

enum LineOperation {
  REPLACE = 0;
  INSERT_BEFORE = 1;
  INSERT_AFTER = 2;
  DELETE = 3;
}

enum LockType {
  SHARED = 0;
  EXCLUSIVE = 1;
}

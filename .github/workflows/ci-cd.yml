name: Secure CI/CD Pipeline

on:
    push:
        branches: ["main"]
    pull_request:
        branches: ["main"]

permissions:
    # Required for all workflows
    security-events: write
    # Only required for workflows in private repositories
    actions: read
    contents: read

env:
    AWS_REGION: us-east-1
    BUCKET_NAME: ctdesarrollo
    DISTRIBUTION: stable
    COMPONENT: main
    ARCH: amd64
    SECURITY_SCANNING: true
    SAST_ENABLED: true
    DEPSCAN_ENABLED: true
    LICENSE_CHECK: true
jobs:
    build:
        runs-on: ubuntu-latest
        steps:
            - uses: actions/checkout@v3

            - name: Set up Go
              uses: actions/setup-go@v4
              with:
                  go-version: "1.24"

            - name: Install dependencies
              run: go mod tidy

            - name: Install Protobuf Compiler
              run: |
                  sudo apt-get update
                  sudo apt-get install -y protobuf-compiler
                  protoc --version

            - name: Initialize CodeQL
              uses: github/codeql-action/init@v3
              with:
                  languages: go

            - name: Perform CodeQL Analysis
              uses: github/codeql-action/analyze@v3
              with:
                  category: "security"

            - name: License Checking
              uses: fossas/fossa-action@main
              with:
                  api-key: ${{ secrets.FOSSA_API_KEY }}
                  fail-on: license-issues

            - name: Run tests with coverage
              run: |
                  go test -v -cover ./...
                  go test -race ./...

            - name: Build binaries with security flags
              run: |
                  # Compila el daemon
                  echo "Compilando el daemon..."
                  CGO_ENABLED=0 go build -o filesystem-daemon \
                    -ldflags="-s -w -X main.version=${{ github.sha }}" \
                    -tags "netgo osusergo static_build" \
                    ./cmd/daemon/main.go

                  # Compila el CLI
                  echo "Compilando el CLI..."
                  CGO_ENABLED=0 go build -o fsdaemon \
                    -ldflags="-s -w -X main.version=${{ github.sha }}" \
                    -tags "netgo osusergo static_build" \
                    ./cmd/cli/main.go

            - name: Binary Security Analysis
              uses: aquasecurity/trivy-action@master
              continue-on-error: true
              with:
                  scan-type: fs
                  format: sarif
                  output: trivy-results.sarif
                  ignore-unfixed: true
                  severity: HIGH,CRITICAL
                  exit-code: 0

            - name: Upload Security Report
              uses: actions/upload-artifact@v4
              with:
                  name: security-report
                  path: trivy-results.sarif

            - name: Create Debian package
              run: |
                  # Instalar herramientas necesarias
                  sudo apt-get update
                  sudo apt-get install -y build-essential debhelper dh-make \
                      libseccomp-dev libsystemd-dev libcap-dev libaudit-dev

                  # Instalar Go desde la fuente oficial
                  wget https://go.dev/dl/go1.24.3.linux-amd64.tar.gz
                  sudo rm -rf /usr/local/go && sudo tar -C /usr/local -xzf go1.24.3.linux-amd64.tar.gz
                  echo "export PATH=$PATH:/usr/local/go/bin" >> $GITHUB_ENV

                  # Crear directorio temporal
                  mkdir -p build
                  cp -r debian build/

                  # Copiar ambos binarios
                  cp filesystem-daemon build/
                  cp fsdaemon build/

                  # Construir paquete
                  cd build
                  # Usar sudo con PATH preservado para asegurar que se use Go 1.24
                  sudo env "PATH=$PATH:/usr/local/go/bin" dpkg-buildpackage -us -uc

            - name: Configure AWS credentials
              uses: aws-actions/configure-aws-credentials@v4
              with:
                  aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
                  aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
                  aws-region: ${{ env.AWS_REGION }}

            - name: Configure GPG
              run: |
                  # Crear y configurar directorio .gnupg
                  mkdir -p ~/.gnupg
                  chmod 700 ~/.gnupg

                  # Configurar el agente GPG
                  echo "allow-loopback-pinentry" > ~/.gnupg/gpg-agent.conf
                  echo "pinentry-mode loopback" > ~/.gnupg/gpg.conf
                  gpgconf --kill gpg-agent
                  gpg-agent --daemon

                  # Importar la clave GPG privada desde el secreto
                  echo "${{ secrets.GPG_PRIVATE_KEY }}" | base64 -d | gpg --batch --import --pinentry-mode loopback

                  # Establecer la confianza en la clave
                  echo -e "5\ny\n" | gpg --command-fd 0 --expert --edit-key "Filesystem Daemon Repo" trust

            - name: Publish package to S3
              run: |
                  # Buscar el paquete Debian generado
                  echo "Buscando el paquete Debian generado..."
                  find . -name "filesystem-daemon_*.deb" -type f

                  # Subir paquete (usar el path correcto)
                  echo "Subiendo paquete a S3..."
                  aws s3 cp ./filesystem-daemon_*.deb s3://${BUCKET_NAME}/pool/${COMPONENT}/ --acl public-read

                  # Crear estructura de directorios necesaria
                  mkdir -p /tmp/packages/pool/${COMPONENT}

                  # Copiar el paquete .deb al directorio temporal
                  cp ./filesystem-daemon_*.deb /tmp/packages/pool/${COMPONENT}/

                  # Generar y firmar Packages
                  apt-ftparchive packages /tmp/packages > /tmp/Packages
                  gpg --clearsign -o /tmp/Packages.asc /tmp/Packages
                  gpg --detach-sign -o /tmp/Packages.sig /tmp/Packages
                  gzip -c /tmp/Packages > /tmp/Packages.gz

                  # Subir índices actualizados
                  aws s3 cp /tmp/Packages s3://${BUCKET_NAME}/dists/${DISTRIBUTION}/${COMPONENT}/binary-${ARCH}/Packages --acl public-read
                  aws s3 cp /tmp/Packages.gz s3://${BUCKET_NAME}/dists/${DISTRIBUTION}/${COMPONENT}/binary-${ARCH}/Packages.gz --acl public-read
                  aws s3 cp /tmp/Packages.sig s3://${BUCKET_NAME}/dists/${DISTRIBUTION}/${COMPONENT}/binary-${ARCH}/Packages.sig --acl public-read
                  aws s3 cp /tmp/Packages.asc s3://${BUCKET_NAME}/dists/${DISTRIBUTION}/${COMPONENT}/binary-${ARCH}/Packages.asc --acl public-read

            - name: Update Release file
              run: |
                  # Generar Release
                  cat > /tmp/Release <<EOL
                  Origin: Filesystem Daemon Repo
                  Label: Filesystem Daemon
                  Suite: ${DISTRIBUTION}
                  Codename: ${DISTRIBUTION}
                  Date: $(date -R)
                  Architectures: ${ARCH}
                  Components: ${COMPONENT}
                  Description: Filesystem Daemon Repository
                  EOL

                  # Subir Release
                  aws s3 cp /tmp/Release s3://${BUCKET_NAME}/dists/${DISTRIBUTION}/Release --acl public-read

            - name: Update apt key
              run: |
                  # Crear y configurar directorio .gnupg
                  mkdir -p ~/.gnupg
                  chmod 700 ~/.gnupg

                  # Configurar el agente GPG
                  echo "allow-loopback-pinentry" > ~/.gnupg/gpg-agent.conf
                  echo "pinentry-mode loopback" > ~/.gnupg/gpg.conf
                  gpgconf --kill gpg-agent
                  gpg-agent --daemon

                  # Importar la clave GPG privada desde el secreto (en formato base64)
                  echo "${{ secrets.GPG_PRIVATE_KEY }}" | base64 -d | gpg --batch --import --pinentry-mode loopback

                  # Establecer la confianza en la clave
                  echo -e "5\ny\n" | gpg --command-fd 0 --expert --edit-key "Filesystem Daemon Repo" trust

                  # Exportar la clave pública
                  gpg --export -a "Filesystem Daemon Repo" > /tmp/apt.key

                  # Subir la clave pública a S3 (ubicación principal para instalación)
                  aws s3 cp /tmp/apt.key s3://${BUCKET_NAME}/apt/ --acl public-read

                  # También subir la clave a la raíz para mayor compatibilidad
                  aws s3 cp /tmp/apt.key s3://${BUCKET_NAME}/pub.key --acl public-read

            - name: Update apt configuration
              run: |
                  # Generar archivo de configuración APT
                  cat > /tmp/apt.conf <<EOL
                  deb [signed-by=/usr/share/keyrings/filesystem-daemon-archive-keyring.gpg arch=${ARCH}] https://${BUCKET_NAME}.s3.${AWS_REGION}.amazonaws.com ${DISTRIBUTION} ${COMPONENT}
                  EOL

                  # Subir configuración
                  aws s3 cp /tmp/apt.conf s3://${BUCKET_NAME}/apt/conf/ --acl public-read

name: Secure CI/CD Pipeline

on:
    push:
        branches: ["main"]
    pull_request:
        branches: ["main"]

permissions:
    # Required for all workflows
    security-events: write
    # Only required for workflows in private repositories
    actions: read
    contents: read

env:
    AWS_REGION: us-east-1
    BUCKET_NAME: ctdesarrollo
    DISTRIBUTION: stable
    COMPONENT: main
    ARCH: amd64
    SECURITY_SCANNING: true
    SAST_ENABLED: true
    DEPSCAN_ENABLED: true
    LICENSE_CHECK: true
    GO_VERSION: "1.24"

jobs:
    build:
        runs-on: ubuntu-latest

        # Configurar el caché para apt
        env:
            APT_CACHE_DIR: /tmp/apt-cache

        steps:
            - uses: actions/checkout@v3

            # Configurar caché para apt
            - name: Cache apt packages
              uses: actions/cache@v3
              with:
                  path: ${{ env.APT_CACHE_DIR }}
                  key: ${{ runner.os }}-apt-${{ hashFiles('**/debian/control') }}
                  restore-keys: |
                      ${{ runner.os }}-apt-

            # Configurar caché para Go
            - name: Cache Go modules and build
              uses: actions/cache@v3
              with:
                  path: |
                      ~/.cache/go-build
                      ~/go/pkg/mod
                  key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
                  restore-keys: |
                      ${{ runner.os }}-go-

            - name: Set up Go
              uses: actions/setup-go@v4
              with:
                  go-version: ${{ env.GO_VERSION }}
                  cache: true

            - name: Install dependencies
              run: |
                  # Configurar directorio de caché para apt
                  sudo mkdir -p ${{ env.APT_CACHE_DIR }}
                  sudo mount --bind ${{ env.APT_CACHE_DIR }} /var/cache/apt/archives

                  # Instalar dependencias
                  sudo apt-get update
                  sudo apt-get install -y --no-install-recommends \
                      build-essential \
                      debhelper \
                      dh-make \
                      libseccomp-dev \
                      libsystemd-dev \
                      libcap-dev \
                      libaudit-dev \
                      protobuf-compiler

                  # Instalar dependencias de Go
                  go mod download
                  go mod verify

            - name: Install Protobuf Compiler
              run: |
                  sudo apt-get update
                  sudo apt-get install -y protobuf-compiler
                  protoc --version

            - name: Initialize CodeQL
              uses: github/codeql-action/init@v3
              with:
                  languages: go

            - name: Perform CodeQL Analysis
              uses: github/codeql-action/analyze@v3
              with:
                  category: "security"

            - name: License Checking
              uses: fossas/fossa-action@main
              with:
                  api-key: ${{ secrets.FOSSA_API_KEY }}
                  fail-on: license-issues

            - name: Run tests with coverage
              run: |
                  go test -v -cover ./...
                  go test -race ./...

            - name: Build binaries with security flags
              run: |
                  # Compila el daemon
                  echo "Compilando el daemon..."
                  CGO_ENABLED=0 go build -o filesystem-daemon \
                    -ldflags="-s -w -X main.version=${{ github.sha }}" \
                    -tags "netgo osusergo static_build" \
                    ./cmd/daemon/main.go

                  # Compila el CLI
                  echo "Compilando el CLI..."
                  CGO_ENABLED=0 go build -o fsdaemon \
                    -ldflags="-s -w -X main.version=${{ github.sha }}" \
                    -tags "netgo osusergo static_build" \
                    ./cmd/cli/main.go

            - name: Binary Security Analysis
              uses: aquasecurity/trivy-action@master
              continue-on-error: true
              with:
                  scan-type: fs
                  format: sarif
                  output: trivy-results.sarif
                  ignore-unfixed: true
                  severity: HIGH,CRITICAL
                  exit-code: 0

            - name: Upload Security Report
              uses: actions/upload-artifact@v4
              with:
                  name: security-report
                  path: trivy-results.sarif

            - name: Create Debian package
              run: |
                  # Crear directorio temporal
                  mkdir -p build
                  cp -r debian build/

                  # Copiar ambos binarios
                  cp filesystem-daemon build/
                  cp fsdaemon build/

                  # Construir paquete
                  cd build
                  # Usar sudo con PATH preservado para asegurar que se use Go 1.24
                  sudo env "PATH=$PATH:/usr/local/go/bin" dpkg-buildpackage -us -uc

            - name: Configure AWS credentials
              uses: aws-actions/configure-aws-credentials@v4
              with:
                  aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
                  aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
                  aws-region: ${{ env.AWS_REGION }}

            - name: Configure GPG environment
              run: |
                  # Eliminar cualquier configuración existente
                  sudo rm -rf ~/.gnupg
                  sudo rm -rf /root/.gnupg

                  # Crear directorios con permisos correctos
                  mkdir -p ~/.gnupg
                  sudo mkdir -p /root/.gnupg
                  chmod 700 ~/.gnupg
                  sudo chmod 700 /root/.gnupg

                  # Configuración básica de GPG
                  cat > ~/.gnupg/gpg.conf <<EOF
                  use-agent
                  pinentry-mode loopback
                  no-tty
                  EOF
                  sudo cp ~/.gnupg/gpg.conf /root/.gnupg/

                  # Configuración del agente
                  cat > ~/.gnupg/gpg-agent.conf <<EOF
                  allow-loopback-pinentry
                  pinentry-program /usr/bin/pinentry-tty
                  default-cache-ttl 7200
                  max-cache-ttl 14400
                  EOF
                  sudo cp ~/.gnupg/gpg-agent.conf /root/.gnupg/

                  # Detener todos los agentes GPG
                  sudo killall gpg-agent || true
                  sudo gpgconf --kill all || true
                  sleep 2

            - name: Import GPG key
              run: |
                  # Reiniciar el agente GPG
                  gpg-agent --daemon --homedir ~/.gnupg

                  # Importar la clave privada
                  echo "${{ secrets.GPG_PRIVATE_KEY }}" | base64 -d | gpg --batch --import --pinentry-mode loopback

                  # Establecer confianza ultimate en la clave
                  gpg --batch --yes --command-fd 0 --expert --edit-key "Filesystem Daemon Repo" trust <<EOF
                  5
                  y
                  quit
                  EOF

                  # Exportar la clave pública
                  gpg --armor --export "Filesystem Daemon Repo" > /tmp/apt.key
                  sudo cp /tmp/apt.key /root/apt.key

            - name: Update apt key
              run: |
                  # Subir la clave pública a S3
                  aws s3 cp /tmp/apt.key s3://${BUCKET_NAME}/apt/ --acl public-read
                  aws s3 cp /tmp/apt.key s3://${BUCKET_NAME}/pub.key --acl public-read

            - name: Update apt configuration
              run: |
                  # Generar archivo de configuración APT
                  cat > /tmp/apt.conf <<EOL
                  deb [signed-by=/usr/share/keyrings/filesystem-daemon-archive-keyring.gpg arch=${ARCH}] https://${BUCKET_NAME}.s3.${AWS_REGION}.amazonaws.com ${DISTRIBUTION} ${COMPONENT}
                  EOL

                  # Subir configuración
                  aws s3 cp /tmp/apt.conf s3://${BUCKET_NAME}/apt/conf/ --acl public-read

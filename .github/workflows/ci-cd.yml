name: Secure CI/CD Pipeline

on:
    push:
        branches: ["main"]
    pull_request:
        branches: ["main"]

permissions:
    # Required for all workflows
    security-events: write
    # Only required for workflows in private repositories
    actions: read
    contents: read

env:
    AWS_REGION: us-east-1
    BUCKET_NAME: ctdesarrollo
    DISTRIBUTION: stable
    COMPONENT: main
    ARCH: amd64
    SECURITY_SCANNING: true
    SAST_ENABLED: true
    DEPSCAN_ENABLED: true
    LICENSE_CHECK: true
    GO_VERSION: "1.24"
    # Variables de entorno para GPG
    GNUPGHOME: /home/runner/.gnupg
    GPG_TTY: /dev/pts/0

jobs:
    build:
        runs-on: ubuntu-latest

        # Configurar el caché para apt
        env:
            APT_CACHE_DIR: /tmp/apt-cache

        steps:
            - uses: actions/checkout@v3

            # Configurar el servicio GPG compartido al inicio
            - name: Setup shared GPG agent
              run: |
                  # Eliminar cualquier configuración existente
                  sudo rm -rf ~/.gnupg

                  # Crear y configurar el directorio GPG
                  install -d -m 700 $GNUPGHOME

                  # Configuración básica de GPG
                  cat > $GNUPGHOME/gpg.conf <<EOF
                  use-agent
                  pinentry-mode loopback
                  no-tty
                  EOF

                  # Configuración del agente
                  cat > $GNUPGHOME/gpg-agent.conf <<EOF
                  allow-loopback-pinentry
                  pinentry-program /usr/bin/pinentry-tty
                  default-cache-ttl 7200
                  max-cache-ttl 14400
                  EOF

                  # Establecer permisos correctos
                  find $GNUPGHOME -type f -exec chmod 600 {} \;
                  find $GNUPGHOME -type d -exec chmod 700 {} \;

                  # Iniciar el agente GPG como servicio
                  gpgconf --kill all || true
                  gpgconf --launch gpg-agent

                  # Importar la clave GPG y establecer confianza
                  echo "${{ secrets.GPG_PRIVATE_KEY }}" | base64 -d | gpg --batch --yes --import --pinentry-mode loopback
                  echo -e "5\ny\nquit" | gpg --batch --yes --command-fd 0 --expert --edit-key "Filesystem Daemon Repo" trust

                  # Exportar la clave pública
                  gpg --armor --export "Filesystem Daemon Repo" > /tmp/apt.key

            # Configurar caché para apt
            - name: Cache apt packages
              uses: actions/cache@v3
              with:
                  path: ${{ env.APT_CACHE_DIR }}
                  key: ${{ runner.os }}-apt-${{ hashFiles('**/debian/control') }}
                  restore-keys: |
                      ${{ runner.os }}-apt-

            # Configurar caché para Go
            - name: Cache Go modules and build
              uses: actions/cache@v3
              with:
                  path: |
                      ~/.cache/go-build
                      ~/go/pkg/mod
                  key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
                  restore-keys: |
                      ${{ runner.os }}-go-

            - name: Set up Go
              uses: actions/setup-go@v4
              with:
                  go-version: ${{ env.GO_VERSION }}
                  cache: true

            - name: Install dependencies
              run: |
                  # Configurar directorio de caché para apt
                  sudo mkdir -p ${{ env.APT_CACHE_DIR }}
                  sudo mount --bind ${{ env.APT_CACHE_DIR }} /var/cache/apt/archives

                  # Instalar dependencias
                  sudo apt-get update
                  sudo apt-get install -y --no-install-recommends \
                      build-essential \
                      debhelper \
                      dh-make \
                      libseccomp-dev \
                      libsystemd-dev \
                      libcap-dev \
                      libaudit-dev \
                      protobuf-compiler

                  # Instalar dependencias de Go
                  go mod download
                  go mod verify

            - name: Install Protobuf Compiler
              run: |
                  sudo apt-get update
                  sudo apt-get install -y protobuf-compiler
                  protoc --version

            - name: Initialize CodeQL
              uses: github/codeql-action/init@v3
              with:
                  languages: go

            - name: Perform CodeQL Analysis
              uses: github/codeql-action/analyze@v3
              with:
                  category: "security"

            - name: License Checking
              uses: fossas/fossa-action@main
              with:
                  api-key: ${{ secrets.FOSSA_API_KEY }}
                  fail-on: license-issues

            - name: Run tests with coverage
              run: |
                  go test -v -cover ./...
                  go test -race ./...

            - name: Build binaries with security flags
              run: |
                  # Compila el daemon
                  echo "Compilando el daemon..."
                  CGO_ENABLED=0 go build -o filesystem-daemon \
                    -ldflags="-s -w -X main.version=${{ github.sha }}" \
                    -tags "netgo osusergo static_build" \
                    ./cmd/daemon/main.go

                  # Compila el CLI
                  echo "Compilando el CLI..."
                  CGO_ENABLED=0 go build -o fsdaemon \
                    -ldflags="-s -w -X main.version=${{ github.sha }}" \
                    -tags "netgo osusergo static_build" \
                    ./cmd/cli/main.go

            - name: Binary Security Analysis
              uses: aquasecurity/trivy-action@master
              continue-on-error: true
              with:
                  scan-type: fs
                  format: sarif
                  output: trivy-results.sarif
                  ignore-unfixed: true
                  severity: HIGH,CRITICAL
                  exit-code: 0

            - name: Upload Security Report
              uses: actions/upload-artifact@v4
              with:
                  name: security-report
                  path: trivy-results.sarif

            - name: Create Debian package
              run: |
                  # Crear directorio temporal
                  mkdir -p build
                  cp -r debian build/

                  # Copiar ambos binarios
                  cp filesystem-daemon build/
                  cp fsdaemon build/

                  # Construir paquete
                  cd build
                  # Usar sudo con PATH preservado para asegurar que se use Go 1.24
                  sudo env "PATH=$PATH:/usr/local/go/bin" dpkg-buildpackage -us -uc

            - name: Configure AWS credentials
              uses: aws-actions/configure-aws-credentials@v4
              with:
                  aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
                  aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
                  aws-region: ${{ env.AWS_REGION }}

            - name: Update apt key
              run: |
                  # Subir la clave pública a S3
                  aws s3 cp /tmp/apt.key s3://${BUCKET_NAME}/apt/ --acl public-read
                  aws s3 cp /tmp/apt.key s3://${BUCKET_NAME}/pub.key --acl public-read

            - name: Publish package to S3
              run: |
                  # Buscar el paquete Debian generado
                  echo "Buscando el paquete Debian generado..."
                  find . -name "filesystem-daemon_*.deb" -type f

                  # Subir paquete a S3
                  echo "Subiendo paquete a S3..."
                  aws s3 cp ./filesystem-daemon_*.deb s3://${BUCKET_NAME}/pool/${COMPONENT}/ --acl public-read

                  # Crear estructura de directorios necesaria
                  mkdir -p /tmp/packages/pool/${COMPONENT}
                  mkdir -p /tmp/packages/dists/${DISTRIBUTION}/${COMPONENT}/binary-${ARCH}
                  cp ./filesystem-daemon_*.deb /tmp/packages/pool/${COMPONENT}/

                  # Generar y firmar Packages
                  cd /tmp/packages
                  apt-ftparchive packages --db /tmp/packages.db \
                    --arch amd64 \
                    --output-dir /tmp/packages/dists/${DISTRIBUTION}/${COMPONENT}/binary-${ARCH} \
                    --path-prefix "" \
                    pool/${COMPONENT} > /tmp/packages/dists/${DISTRIBUTION}/${COMPONENT}/binary-${ARCH}/Packages

                  gzip -9c dists/${DISTRIBUTION}/${COMPONENT}/binary-${ARCH}/Packages > dists/${DISTRIBUTION}/${COMPONENT}/binary-${ARCH}/Packages.gz
                  gpg --clearsign --batch --yes -o dists/${DISTRIBUTION}/${COMPONENT}/binary-${ARCH}/Packages.asc dists/${DISTRIBUTION}/${COMPONENT}/binary-${ARCH}/Packages

                  # Crear configuración de apt-ftparchive
                  cat > /tmp/apt-ftparchive.conf <<EOF
                  APT::FTPArchive::Release {
                    Origin "Filesystem Daemon Repository";
                    Label "Filesystem Daemon";
                    Suite "stable";
                    Codename "stable";
                    Architectures "amd64";
                    Components "main";
                    Description "Filesystem Daemon APT Repository";
                  };
                  EOF

                  # Generar Release usando la configuración
                  cd /tmp/packages
                  apt-ftparchive -c /tmp/apt-ftparchive.conf release dists/${DISTRIBUTION} > dists/${DISTRIBUTION}/Release

                  # Firmar Release (crear InRelease y Release.gpg)
                  gpg --clearsign --batch --yes -o dists/${DISTRIBUTION}/InRelease dists/${DISTRIBUTION}/Release
                  gpg -abs --batch --yes -o dists/${DISTRIBUTION}/Release.gpg dists/${DISTRIBUTION}/Release

                  # Subir índices actualizados
                  aws s3 cp /tmp/packages/dists/${DISTRIBUTION}/${COMPONENT}/binary-${ARCH}/Packages s3://${BUCKET_NAME}/dists/${DISTRIBUTION}/${COMPONENT}/binary-${ARCH}/Packages --acl public-read
                  aws s3 cp /tmp/packages/dists/${DISTRIBUTION}/${COMPONENT}/binary-${ARCH}/Packages.gz s3://${BUCKET_NAME}/dists/${DISTRIBUTION}/${COMPONENT}/binary-${ARCH}/Packages.gz --acl public-read
                  aws s3 cp /tmp/packages/dists/${DISTRIBUTION}/${COMPONENT}/binary-${ARCH}/Packages.asc s3://${BUCKET_NAME}/dists/${DISTRIBUTION}/${COMPONENT}/binary-${ARCH}/Packages.asc --acl public-read

                  # Subir archivos Release e InRelease
                  aws s3 cp /tmp/packages/dists/${DISTRIBUTION}/Release s3://${BUCKET_NAME}/dists/${DISTRIBUTION}/Release --acl public-read
                  aws s3 cp /tmp/packages/dists/${DISTRIBUTION}/InRelease s3://${BUCKET_NAME}/dists/${DISTRIBUTION}/InRelease --acl public-read
                  aws s3 cp /tmp/packages/dists/${DISTRIBUTION}/Release.gpg s3://${BUCKET_NAME}/dists/${DISTRIBUTION}/Release.gpg --acl public-read
